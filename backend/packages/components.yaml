components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        role:
          type: string
          enum: [user, admin]
        originalname:
          type: string
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        firstName: fake name
        lastName: fake
        stack: frontend
        gender: female
        image: example.png
        role: user

    Article:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        article:
          type: string
        image:
          type: string
        originalname:
          type: string
      example:
        id: 5ebac534954b54139806c112
        title: fake aritlce
        article: This is a fake article body
        image: example.png

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    Upload:
      type: object
      properties:
        filename:
          type: string
        mimetype:
          type: string
        location:
          type: string
        originalname:
          type: string
        size:
          type: integer
          format: int64
      example:
        filename: 5ebac534954b54139806c112
        mimetype: image/png
        location: https://s3.amazonaws.com/bucket-name/5ebac534954b54139806c112
        originalname: image.png
        size: 12345

    InviteStatus:
      type: object
      properties:
        uploadStatus:
          type: string
        inviteStatus:
          type: string
        totalInvitesSent:
          type: number
        failedInvites:
          type: number
        failedInvitesList:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            reason:
              type: string
      example:
        uploadStatus: 'success'
        inviteStatus: 'processing'
        totalInvitesSent: 0
        failedInvites: 0
        failedInvitesList: []

    Invite:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        stack:
          type: string
        gender:
          type: string
        image:
          type: string
        invitationCode: string
      example:
        email: 'john@doe.com'
        firstName: 'John'
        lastName: 'Doe'
        role: 'user'
        stack: 'Software Engineer'
        gender: 'Female'
        image: 'example.jpg'
        invitationCode: '2393664425'

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    UserWithTokens:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tokens:
          $ref: '#/components/schemas/AuthTokens'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
